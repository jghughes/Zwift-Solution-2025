from typing import Dict, List, Tuple

def generate_workunit_mapping(n: int) -> Dict[str, List[Tuple[str, str]]]:
    """
    Generates a mapping of TT working riders to tasks. For example, with n = 3, 
    the mapping will be from:-

    	        Unit duration		
    Position	t1	    t2	    t3
    p1	        rider1	rider2	rider3
    p2	        rider2	rider3	rider1
    p3	        rider3	rider1	rider2

    to this: ->

    rider1=	(p1,t1)	(p3,t2)	(p2,t3)
    rider2=	(p2,t1)	(p1,t2)	(p3,t3)
    rider3=	(p3,t1)	(p2,t2)	(p1,t3)

    The mapping is generated by iterating through each work rider and task, and 
    calculating the corresponding row and column indices.

    The row calculation is done as follows:
    - k: The current work rider index, starting from 1 up to n.
    - n: The total number of work riders/tasks.
    - j: The current task index, starting from 0 up to n-1.
    - k + n - j - 1: This expression adjusts the row index based on the current work rider and task.
      By subtracting j and adding n - 1, we effectively rotate the rows in the desired pattern.
    - % n: This modulo operation ensures that the row index wraps around when it exceeds n.
      For example, if n is 3, the row index will cycle through 1, 2, and 3.
    - + 1: This adjusts the 0-based index (resulting from the modulo operation) to a 1-based index,
      which matches the desired output format.

    The columns represent the task indices, which are straightforwardly incremented 
    from 1 to n for each work rider.

    For example, with n = 3:
    - For rider1, the rows are 1, 3, 2 and the columns are 1, 2, 3.
    - For rider2, the rows are 2, 1, 3 and the columns are 1, 2, 3.
    - For rider3, the rows are 3, 2, 1 and the columns are 1, 2, 3.

    Args:
        n (int): The number of work riders/tasks.

    Returns:
        dict: A dictionary mapping work riders to their respective tasks.
    """
    mapping: Dict[str, List[Tuple[str, str]]] = {}
    for k in range(1, n + 1):
        rider_workunits: List[Tuple[str, str]] = []
        for j in range(n):
            row = (k + n - j - 1) % n + 1
            col = j + 1
            rider_workunits.append((f"p{row}", f"t{col}"))
        mapping[f"r{k}"] = rider_workunits
    return mapping

# Example usage:
def main() -> None:
    # Configure logging
    import logging
    from jgh_logging import jgh_configure_logging
    jgh_configure_logging("appsettings.json")
    logger = logging.getLogger(__name__)

    n = 3
    mapping = generate_rider_workunit_mapping(n)
    for rider, tasks in mapping.items():
        logger.info(f"{rider} = {tasks}")

if __name__ == "__main__":
    main()
